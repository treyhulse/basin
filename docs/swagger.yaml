basePath: /
definitions:
  models.CreateItemMeta:
    properties:
      message:
        example: Item created successfully
        type: string
      table:
        example: customers
        type: string
    type: object
  models.CreateItemResponse:
    properties:
      data:
        additionalProperties: true
        type: object
      meta:
        $ref: '#/definitions/models.CreateItemMeta'
    type: object
  models.DeleteItemMeta:
    properties:
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      message:
        example: Item deleted successfully
        type: string
      table:
        example: customers
        type: string
    type: object
  models.DeleteItemResponse:
    properties:
      meta:
        $ref: '#/definitions/models.DeleteItemMeta'
    type: object
  models.ErrorResponse:
    properties:
      code:
        example: INVALID_TABLE
        type: string
      details:
        example: Table 'invalid_table' does not exist or is not accessible
        type: string
      error:
        example: Invalid table name
        type: string
    type: object
  models.ItemMeta:
    properties:
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      table:
        example: customers
        type: string
    type: object
  models.ItemResponse:
    properties:
      data:
        additionalProperties: true
        type: object
      meta:
        $ref: '#/definitions/models.ItemMeta'
    type: object
  models.ItemsListMeta:
    properties:
      count:
        example: 25
        type: integer
      limit:
        example: 25
        type: integer
      offset:
        example: 0
        type: integer
      table:
        example: customers
        type: string
      total:
        example: 100
        type: integer
      type:
        example: data
        type: string
    type: object
  models.ItemsListResponse:
    properties:
      data:
        items:
          additionalProperties: true
          type: object
        type: array
      meta:
        $ref: '#/definitions/models.ItemsListMeta'
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.UpdateItemMeta:
    properties:
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      table:
        example: customers
        type: string
    type: object
  models.UpdateItemResponse:
    properties:
      data:
        additionalProperties: true
        type: object
      meta:
        $ref: '#/definitions/models.UpdateItemMeta'
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: Directus-style API with Role-Based Access Control (RBAC). A powerful,
    generic API that provides CRUD operations for any database table with comprehensive
    security, multi-tenancy, and dynamic schema management.
  title: Basin API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
  /auth/me:
    get:
      description: Retrieve information about the currently authenticated user. Requires
        valid JWT Bearer token or API key.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - auth
  /items/{table}:
    get:
      description: Retrieve a list of items from a specified table. Requires authentication
        via JWT Bearer token or API key.
      parameters:
      - description: Table name
        in: path
        name: table
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Page (1-based)
        in: query
        name: page
        type: integer
      - description: Per page
        in: query
        name: per_page
        type: integer
      - description: Sort field
        in: query
        name: sort
        type: string
      - description: ASC or DESC
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ItemsListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: List items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create a new item in the specified table. Requires authentication
        via JWT Bearer token or API key.
      parameters:
      - description: Table name
        in: path
        name: table
        required: true
        type: string
      - description: Item data
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create item
      tags:
      - items
  /items/{table}/{id}:
    delete:
      description: Delete an item from the specified table. Requires authentication
        via JWT Bearer token or API key.
      parameters:
      - description: Table name
        in: path
        name: table
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete item
      tags:
      - items
    get:
      description: Retrieve a specific item by ID. Requires authentication via JWT
        Bearer token or API key.
      parameters:
      - description: Table name
        in: path
        name: table
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get item
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update an existing item in the specified table. Requires authentication
        via JWT Bearer token or API key.
      parameters:
      - description: Table name
        in: path
        name: table
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      - description: Item data to update
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateItemResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update item
      tags:
      - items
securityDefinitions:
  ApiKeyAuth:
    description: 'API key for programmatic access (format: Bearer YOUR_API_KEY)'
    in: header
    name: Authorization
    type: apiKey
  BearerAuth:
    description: JWT Bearer token for user authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
